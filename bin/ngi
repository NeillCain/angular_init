#!/usr/bin/env ruby

# angular_init (short-name: ngi)
# Copyright 2015 Joshua Beam
# github.com/joshbeam/angular_init
# MIT License

# Ngi is the main module (src/ruby/angular_init.rb)
require_relative '../lib/ngi'
require_relative '../lib/ngi/utils/utils'

# This class is just a wrapper for the main process
# of ngi
class Parser
  CURRENT_DIR = File.dirname(__FILE__)

  COMPONENTS_FILE = "#{CURRENT_DIR}/../lib/config/config.components.yml"
  COMPONENTS_HASH = Ngi::Delegate::Configure
                    .new(COMPONENTS_FILE)
                    .to_ruby(from: 'yaml')
  COMPONENTS = COMPONENTS_HASH.collect { |c| c['name'] }

  CONFIG_FILE = "#{CURRENT_DIR}/../lib/config/config.yml"
  CONFIG_HASH = Ngi::Delegate::Configure.new(CONFIG_FILE).to_ruby(from: 'yaml')

  CONFIGURABLE_FILE = "#{CURRENT_DIR}/../lib/config/config.configurable.yml"
  CONFIGURABLE = Ngi::Delegate::Configure.new(CONFIGURABLE_FILE).to_ruby(from: 'yaml')

  LANGUAGES_FILE = "#{CURRENT_DIR}/../lib/config/config.languages.yml"
  LANGUAGES_HASH = Ngi::Delegate::Configure.new(LANGUAGES_FILE).to_ruby(from: 'yaml')

  def self.parse(args)
    p = Utils::CommandParser.new do |parser|
      components = Ngi::UserInput.new(valid_inputs: COMPONENTS)

      parser.name, parser.version = 'ngi', Ngi::VERSION
      parser.banner << "\n(<command> can be one of the following)"

      parser.on(components.valid_inputs, 'Create a new component') do |type|
        chosen_type = -> (c) { c['name'] == type }
        component = COMPONENTS_HASH.find(&chosen_type)

        if CONFIG_HASH.key? 'templates'
          custom = CONFIG_HASH['templates'].find(&chosen_type)
          language = CONFIG_HASH['language'].collect { |_,v| v }

          unless custom.nil?
            template = custom['templates'].find { |t| language.include? t['language'] }

            unless template.nil?
              template = template['template']
              # Rebuild the object to be used by Delegate::Generator
              custom = {
                'type' => custom['type'],
                'using' => 'user',
                'template' => template,
                'name' => custom['name']
              }

              component = custom
            end
          end
        end

        Ngi::Delegate::Generator.run(
          type: type,
          config: CONFIG_HASH,
          component: component
        )
      end

      parser.on(['-o', '--options'], 'Configure ngi') do
        Ngi::Delegate::Configure.run(
          write: true,
          to: 'yaml',
          destination: CONFIG_FILE,
          languages: LANGUAGES_HASH,
          config: CONFIG_HASH,
          components: COMPONENTS,
          components_hash: COMPONENTS_HASH,
          configurable: CONFIGURABLE
        )
      end
    end

    p.parse(args)
  end
end

Parser.parse(ARGV)
